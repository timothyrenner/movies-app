// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: movie_reviews.sql

package database

import (
	"context"
)

const getReviewForMovie = `-- name: GetReviewForMovie :one
SELECT uuid,
    movie_uuid,
    movie_title,
    review,
    liked
FROM review
WHERE movie_title = ?
`

type GetReviewForMovieRow struct {
	Uuid       string
	MovieUuid  string
	MovieTitle string
	Review     string
	Liked      int64
}

func (q *Queries) GetReviewForMovie(ctx context.Context, movieTitle string) (GetReviewForMovieRow, error) {
	row := q.db.QueryRowContext(ctx, getReviewForMovie, movieTitle)
	var i GetReviewForMovieRow
	err := row.Scan(
		&i.Uuid,
		&i.MovieUuid,
		&i.MovieTitle,
		&i.Review,
		&i.Liked,
	)
	return i, err
}

const insertReview = `-- name: InsertReview :exec
INSERT INTO review (uuid, movie_uuid, movie_title, review, liked)
VALUES (?, ?, ?, ?, ?) ON CONFLICT (movie_uuid) DO
UPDATE
SET review = excluded.review,
    liked = excluded.liked
`

type InsertReviewParams struct {
	Uuid       string
	MovieUuid  string
	MovieTitle string
	Review     string
	Liked      int64
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) error {
	_, err := q.db.ExecContext(ctx, insertReview,
		arg.Uuid,
		arg.MovieUuid,
		arg.MovieTitle,
		arg.Review,
		arg.Liked,
	)
	return err
}
