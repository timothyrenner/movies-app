// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Movies", testMovies)
	t.Run("MovieActors", testMovieActors)
	t.Run("MovieDirectors", testMovieDirectors)
	t.Run("MovieGenres", testMovieGenres)
	t.Run("MovieRatings", testMovieRatings)
	t.Run("MovieWatches", testMovieWatches)
	t.Run("MovieWriters", testMovieWriters)
}

func TestDelete(t *testing.T) {
	t.Run("Movies", testMoviesDelete)
	t.Run("MovieActors", testMovieActorsDelete)
	t.Run("MovieDirectors", testMovieDirectorsDelete)
	t.Run("MovieGenres", testMovieGenresDelete)
	t.Run("MovieRatings", testMovieRatingsDelete)
	t.Run("MovieWatches", testMovieWatchesDelete)
	t.Run("MovieWriters", testMovieWritersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Movies", testMoviesQueryDeleteAll)
	t.Run("MovieActors", testMovieActorsQueryDeleteAll)
	t.Run("MovieDirectors", testMovieDirectorsQueryDeleteAll)
	t.Run("MovieGenres", testMovieGenresQueryDeleteAll)
	t.Run("MovieRatings", testMovieRatingsQueryDeleteAll)
	t.Run("MovieWatches", testMovieWatchesQueryDeleteAll)
	t.Run("MovieWriters", testMovieWritersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Movies", testMoviesSliceDeleteAll)
	t.Run("MovieActors", testMovieActorsSliceDeleteAll)
	t.Run("MovieDirectors", testMovieDirectorsSliceDeleteAll)
	t.Run("MovieGenres", testMovieGenresSliceDeleteAll)
	t.Run("MovieRatings", testMovieRatingsSliceDeleteAll)
	t.Run("MovieWatches", testMovieWatchesSliceDeleteAll)
	t.Run("MovieWriters", testMovieWritersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Movies", testMoviesExists)
	t.Run("MovieActors", testMovieActorsExists)
	t.Run("MovieDirectors", testMovieDirectorsExists)
	t.Run("MovieGenres", testMovieGenresExists)
	t.Run("MovieRatings", testMovieRatingsExists)
	t.Run("MovieWatches", testMovieWatchesExists)
	t.Run("MovieWriters", testMovieWritersExists)
}

func TestFind(t *testing.T) {
	t.Run("Movies", testMoviesFind)
	t.Run("MovieActors", testMovieActorsFind)
	t.Run("MovieDirectors", testMovieDirectorsFind)
	t.Run("MovieGenres", testMovieGenresFind)
	t.Run("MovieRatings", testMovieRatingsFind)
	t.Run("MovieWatches", testMovieWatchesFind)
	t.Run("MovieWriters", testMovieWritersFind)
}

func TestBind(t *testing.T) {
	t.Run("Movies", testMoviesBind)
	t.Run("MovieActors", testMovieActorsBind)
	t.Run("MovieDirectors", testMovieDirectorsBind)
	t.Run("MovieGenres", testMovieGenresBind)
	t.Run("MovieRatings", testMovieRatingsBind)
	t.Run("MovieWatches", testMovieWatchesBind)
	t.Run("MovieWriters", testMovieWritersBind)
}

func TestOne(t *testing.T) {
	t.Run("Movies", testMoviesOne)
	t.Run("MovieActors", testMovieActorsOne)
	t.Run("MovieDirectors", testMovieDirectorsOne)
	t.Run("MovieGenres", testMovieGenresOne)
	t.Run("MovieRatings", testMovieRatingsOne)
	t.Run("MovieWatches", testMovieWatchesOne)
	t.Run("MovieWriters", testMovieWritersOne)
}

func TestAll(t *testing.T) {
	t.Run("Movies", testMoviesAll)
	t.Run("MovieActors", testMovieActorsAll)
	t.Run("MovieDirectors", testMovieDirectorsAll)
	t.Run("MovieGenres", testMovieGenresAll)
	t.Run("MovieRatings", testMovieRatingsAll)
	t.Run("MovieWatches", testMovieWatchesAll)
	t.Run("MovieWriters", testMovieWritersAll)
}

func TestCount(t *testing.T) {
	t.Run("Movies", testMoviesCount)
	t.Run("MovieActors", testMovieActorsCount)
	t.Run("MovieDirectors", testMovieDirectorsCount)
	t.Run("MovieGenres", testMovieGenresCount)
	t.Run("MovieRatings", testMovieRatingsCount)
	t.Run("MovieWatches", testMovieWatchesCount)
	t.Run("MovieWriters", testMovieWritersCount)
}

func TestInsert(t *testing.T) {
	t.Run("Movies", testMoviesInsert)
	t.Run("Movies", testMoviesInsertWhitelist)
	t.Run("MovieActors", testMovieActorsInsert)
	t.Run("MovieActors", testMovieActorsInsertWhitelist)
	t.Run("MovieDirectors", testMovieDirectorsInsert)
	t.Run("MovieDirectors", testMovieDirectorsInsertWhitelist)
	t.Run("MovieGenres", testMovieGenresInsert)
	t.Run("MovieGenres", testMovieGenresInsertWhitelist)
	t.Run("MovieRatings", testMovieRatingsInsert)
	t.Run("MovieRatings", testMovieRatingsInsertWhitelist)
	t.Run("MovieWatches", testMovieWatchesInsert)
	t.Run("MovieWatches", testMovieWatchesInsertWhitelist)
	t.Run("MovieWriters", testMovieWritersInsert)
	t.Run("MovieWriters", testMovieWritersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("MovieActorToMovieUsingMovie", testMovieActorToOneMovieUsingMovie)
	t.Run("MovieDirectorToMovieUsingMovie", testMovieDirectorToOneMovieUsingMovie)
	t.Run("MovieGenreToMovieUsingMovie", testMovieGenreToOneMovieUsingMovie)
	t.Run("MovieRatingToMovieUsingMovie", testMovieRatingToOneMovieUsingMovie)
	t.Run("MovieWatchToMovieUsingMovie", testMovieWatchToOneMovieUsingMovie)
	t.Run("MovieWriterToMovieUsingMovie", testMovieWriterToOneMovieUsingMovie)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("MovieToMovieActors", testMovieToManyMovieActors)
	t.Run("MovieToMovieDirectors", testMovieToManyMovieDirectors)
	t.Run("MovieToMovieGenres", testMovieToManyMovieGenres)
	t.Run("MovieToMovieRatings", testMovieToManyMovieRatings)
	t.Run("MovieToMovieWatches", testMovieToManyMovieWatches)
	t.Run("MovieToMovieWriters", testMovieToManyMovieWriters)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("MovieActorToMovieUsingMovieActors", testMovieActorToOneSetOpMovieUsingMovie)
	t.Run("MovieDirectorToMovieUsingMovieDirectors", testMovieDirectorToOneSetOpMovieUsingMovie)
	t.Run("MovieGenreToMovieUsingMovieGenres", testMovieGenreToOneSetOpMovieUsingMovie)
	t.Run("MovieRatingToMovieUsingMovieRatings", testMovieRatingToOneSetOpMovieUsingMovie)
	t.Run("MovieWatchToMovieUsingMovieWatches", testMovieWatchToOneSetOpMovieUsingMovie)
	t.Run("MovieWriterToMovieUsingMovieWriters", testMovieWriterToOneSetOpMovieUsingMovie)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("MovieActorToMovieUsingMovieActors", testMovieActorToOneRemoveOpMovieUsingMovie)
	t.Run("MovieDirectorToMovieUsingMovieDirectors", testMovieDirectorToOneRemoveOpMovieUsingMovie)
	t.Run("MovieGenreToMovieUsingMovieGenres", testMovieGenreToOneRemoveOpMovieUsingMovie)
	t.Run("MovieRatingToMovieUsingMovieRatings", testMovieRatingToOneRemoveOpMovieUsingMovie)
	t.Run("MovieWatchToMovieUsingMovieWatches", testMovieWatchToOneRemoveOpMovieUsingMovie)
	t.Run("MovieWriterToMovieUsingMovieWriters", testMovieWriterToOneRemoveOpMovieUsingMovie)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("MovieToMovieActors", testMovieToManyAddOpMovieActors)
	t.Run("MovieToMovieDirectors", testMovieToManyAddOpMovieDirectors)
	t.Run("MovieToMovieGenres", testMovieToManyAddOpMovieGenres)
	t.Run("MovieToMovieRatings", testMovieToManyAddOpMovieRatings)
	t.Run("MovieToMovieWatches", testMovieToManyAddOpMovieWatches)
	t.Run("MovieToMovieWriters", testMovieToManyAddOpMovieWriters)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("MovieToMovieActors", testMovieToManySetOpMovieActors)
	t.Run("MovieToMovieDirectors", testMovieToManySetOpMovieDirectors)
	t.Run("MovieToMovieGenres", testMovieToManySetOpMovieGenres)
	t.Run("MovieToMovieRatings", testMovieToManySetOpMovieRatings)
	t.Run("MovieToMovieWatches", testMovieToManySetOpMovieWatches)
	t.Run("MovieToMovieWriters", testMovieToManySetOpMovieWriters)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("MovieToMovieActors", testMovieToManyRemoveOpMovieActors)
	t.Run("MovieToMovieDirectors", testMovieToManyRemoveOpMovieDirectors)
	t.Run("MovieToMovieGenres", testMovieToManyRemoveOpMovieGenres)
	t.Run("MovieToMovieRatings", testMovieToManyRemoveOpMovieRatings)
	t.Run("MovieToMovieWatches", testMovieToManyRemoveOpMovieWatches)
	t.Run("MovieToMovieWriters", testMovieToManyRemoveOpMovieWriters)
}

func TestReload(t *testing.T) {
	t.Run("Movies", testMoviesReload)
	t.Run("MovieActors", testMovieActorsReload)
	t.Run("MovieDirectors", testMovieDirectorsReload)
	t.Run("MovieGenres", testMovieGenresReload)
	t.Run("MovieRatings", testMovieRatingsReload)
	t.Run("MovieWatches", testMovieWatchesReload)
	t.Run("MovieWriters", testMovieWritersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Movies", testMoviesReloadAll)
	t.Run("MovieActors", testMovieActorsReloadAll)
	t.Run("MovieDirectors", testMovieDirectorsReloadAll)
	t.Run("MovieGenres", testMovieGenresReloadAll)
	t.Run("MovieRatings", testMovieRatingsReloadAll)
	t.Run("MovieWatches", testMovieWatchesReloadAll)
	t.Run("MovieWriters", testMovieWritersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Movies", testMoviesSelect)
	t.Run("MovieActors", testMovieActorsSelect)
	t.Run("MovieDirectors", testMovieDirectorsSelect)
	t.Run("MovieGenres", testMovieGenresSelect)
	t.Run("MovieRatings", testMovieRatingsSelect)
	t.Run("MovieWatches", testMovieWatchesSelect)
	t.Run("MovieWriters", testMovieWritersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Movies", testMoviesUpdate)
	t.Run("MovieActors", testMovieActorsUpdate)
	t.Run("MovieDirectors", testMovieDirectorsUpdate)
	t.Run("MovieGenres", testMovieGenresUpdate)
	t.Run("MovieRatings", testMovieRatingsUpdate)
	t.Run("MovieWatches", testMovieWatchesUpdate)
	t.Run("MovieWriters", testMovieWritersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Movies", testMoviesSliceUpdateAll)
	t.Run("MovieActors", testMovieActorsSliceUpdateAll)
	t.Run("MovieDirectors", testMovieDirectorsSliceUpdateAll)
	t.Run("MovieGenres", testMovieGenresSliceUpdateAll)
	t.Run("MovieRatings", testMovieRatingsSliceUpdateAll)
	t.Run("MovieWatches", testMovieWatchesSliceUpdateAll)
	t.Run("MovieWriters", testMovieWritersSliceUpdateAll)
}
