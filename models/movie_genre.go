// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MovieGenre is an object representing the database table.
type MovieGenre struct {
	UUID            null.String `boil:"uuid" json:"uuid,omitempty" toml:"uuid" yaml:"uuid,omitempty"`
	MovieUUID       null.String `boil:"movie_uuid" json:"movie_uuid,omitempty" toml:"movie_uuid" yaml:"movie_uuid,omitempty"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedDatetime int64       `boil:"created_datetime" json:"created_datetime" toml:"created_datetime" yaml:"created_datetime"`

	R *movieGenreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L movieGenreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MovieGenreColumns = struct {
	UUID            string
	MovieUUID       string
	Name            string
	CreatedDatetime string
}{
	UUID:            "uuid",
	MovieUUID:       "movie_uuid",
	Name:            "name",
	CreatedDatetime: "created_datetime",
}

var MovieGenreTableColumns = struct {
	UUID            string
	MovieUUID       string
	Name            string
	CreatedDatetime string
}{
	UUID:            "movie_genre.uuid",
	MovieUUID:       "movie_genre.movie_uuid",
	Name:            "movie_genre.name",
	CreatedDatetime: "movie_genre.created_datetime",
}

// Generated where

var MovieGenreWhere = struct {
	UUID            whereHelpernull_String
	MovieUUID       whereHelpernull_String
	Name            whereHelperstring
	CreatedDatetime whereHelperint64
}{
	UUID:            whereHelpernull_String{field: "\"movie_genre\".\"uuid\""},
	MovieUUID:       whereHelpernull_String{field: "\"movie_genre\".\"movie_uuid\""},
	Name:            whereHelperstring{field: "\"movie_genre\".\"name\""},
	CreatedDatetime: whereHelperint64{field: "\"movie_genre\".\"created_datetime\""},
}

// MovieGenreRels is where relationship names are stored.
var MovieGenreRels = struct {
	Movie string
}{
	Movie: "Movie",
}

// movieGenreR is where relationships are stored.
type movieGenreR struct {
	Movie *Movie `boil:"Movie" json:"Movie" toml:"Movie" yaml:"Movie"`
}

// NewStruct creates a new relationship struct
func (*movieGenreR) NewStruct() *movieGenreR {
	return &movieGenreR{}
}

func (r *movieGenreR) GetMovie() *Movie {
	if r == nil {
		return nil
	}
	return r.Movie
}

// movieGenreL is where Load methods for each relationship are stored.
type movieGenreL struct{}

var (
	movieGenreAllColumns            = []string{"uuid", "movie_uuid", "name", "created_datetime"}
	movieGenreColumnsWithoutDefault = []string{"name"}
	movieGenreColumnsWithDefault    = []string{"uuid", "movie_uuid", "created_datetime"}
	movieGenrePrimaryKeyColumns     = []string{"uuid"}
	movieGenreGeneratedColumns      = []string{}
)

type (
	// MovieGenreSlice is an alias for a slice of pointers to MovieGenre.
	// This should almost always be used instead of []MovieGenre.
	MovieGenreSlice []*MovieGenre

	movieGenreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	movieGenreType                 = reflect.TypeOf(&MovieGenre{})
	movieGenreMapping              = queries.MakeStructMapping(movieGenreType)
	movieGenrePrimaryKeyMapping, _ = queries.BindMapping(movieGenreType, movieGenreMapping, movieGenrePrimaryKeyColumns)
	movieGenreInsertCacheMut       sync.RWMutex
	movieGenreInsertCache          = make(map[string]insertCache)
	movieGenreUpdateCacheMut       sync.RWMutex
	movieGenreUpdateCache          = make(map[string]updateCache)
	movieGenreUpsertCacheMut       sync.RWMutex
	movieGenreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single movieGenre record from the query.
func (q movieGenreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MovieGenre, error) {
	o := &MovieGenre{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for movie_genre")
	}

	return o, nil
}

// All returns all MovieGenre records from the query.
func (q movieGenreQuery) All(ctx context.Context, exec boil.ContextExecutor) (MovieGenreSlice, error) {
	var o []*MovieGenre

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MovieGenre slice")
	}

	return o, nil
}

// Count returns the count of all MovieGenre records in the query.
func (q movieGenreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count movie_genre rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q movieGenreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if movie_genre exists")
	}

	return count > 0, nil
}

// Movie pointed to by the foreign key.
func (o *MovieGenre) Movie(mods ...qm.QueryMod) movieQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.MovieUUID),
	}

	queryMods = append(queryMods, mods...)

	return Movies(queryMods...)
}

// LoadMovie allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (movieGenreL) LoadMovie(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMovieGenre interface{}, mods queries.Applicator) error {
	var slice []*MovieGenre
	var object *MovieGenre

	if singular {
		var ok bool
		object, ok = maybeMovieGenre.(*MovieGenre)
		if !ok {
			object = new(MovieGenre)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMovieGenre)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMovieGenre))
			}
		}
	} else {
		s, ok := maybeMovieGenre.(*[]*MovieGenre)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMovieGenre)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMovieGenre))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &movieGenreR{}
		}
		if !queries.IsNil(object.MovieUUID) {
			args = append(args, object.MovieUUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &movieGenreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MovieUUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MovieUUID) {
				args = append(args, obj.MovieUUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`movie`),
		qm.WhereIn(`movie.uuid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Movie")
	}

	var resultSlice []*Movie
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Movie")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for movie")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for movie")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Movie = foreign
		if foreign.R == nil {
			foreign.R = &movieR{}
		}
		foreign.R.MovieGenres = append(foreign.R.MovieGenres, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MovieUUID, foreign.UUID) {
				local.R.Movie = foreign
				if foreign.R == nil {
					foreign.R = &movieR{}
				}
				foreign.R.MovieGenres = append(foreign.R.MovieGenres, local)
				break
			}
		}
	}

	return nil
}

// SetMovie of the movieGenre to the related item.
// Sets o.R.Movie to related.
// Adds o to related.R.MovieGenres.
func (o *MovieGenre) SetMovie(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Movie) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"movie_genre\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"movie_uuid"}),
		strmangle.WhereClause("\"", "\"", 0, movieGenrePrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MovieUUID, related.UUID)
	if o.R == nil {
		o.R = &movieGenreR{
			Movie: related,
		}
	} else {
		o.R.Movie = related
	}

	if related.R == nil {
		related.R = &movieR{
			MovieGenres: MovieGenreSlice{o},
		}
	} else {
		related.R.MovieGenres = append(related.R.MovieGenres, o)
	}

	return nil
}

// RemoveMovie relationship.
// Sets o.R.Movie to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MovieGenre) RemoveMovie(ctx context.Context, exec boil.ContextExecutor, related *Movie) error {
	var err error

	queries.SetScanner(&o.MovieUUID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("movie_uuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Movie = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MovieGenres {
		if queries.Equal(o.MovieUUID, ri.MovieUUID) {
			continue
		}

		ln := len(related.R.MovieGenres)
		if ln > 1 && i < ln-1 {
			related.R.MovieGenres[i] = related.R.MovieGenres[ln-1]
		}
		related.R.MovieGenres = related.R.MovieGenres[:ln-1]
		break
	}
	return nil
}

// MovieGenres retrieves all the records using an executor.
func MovieGenres(mods ...qm.QueryMod) movieGenreQuery {
	mods = append(mods, qm.From("\"movie_genre\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"movie_genre\".*"})
	}

	return movieGenreQuery{q}
}

// FindMovieGenre retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMovieGenre(ctx context.Context, exec boil.ContextExecutor, uUID null.String, selectCols ...string) (*MovieGenre, error) {
	movieGenreObj := &MovieGenre{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"movie_genre\" where \"uuid\"=?", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, movieGenreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from movie_genre")
	}

	return movieGenreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MovieGenre) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no movie_genre provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(movieGenreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	movieGenreInsertCacheMut.RLock()
	cache, cached := movieGenreInsertCache[key]
	movieGenreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			movieGenreAllColumns,
			movieGenreColumnsWithDefault,
			movieGenreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(movieGenreType, movieGenreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(movieGenreType, movieGenreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"movie_genre\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"movie_genre\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into movie_genre")
	}

	if !cached {
		movieGenreInsertCacheMut.Lock()
		movieGenreInsertCache[key] = cache
		movieGenreInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MovieGenre.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MovieGenre) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	movieGenreUpdateCacheMut.RLock()
	cache, cached := movieGenreUpdateCache[key]
	movieGenreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			movieGenreAllColumns,
			movieGenrePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update movie_genre, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"movie_genre\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, movieGenrePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(movieGenreType, movieGenreMapping, append(wl, movieGenrePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update movie_genre row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for movie_genre")
	}

	if !cached {
		movieGenreUpdateCacheMut.Lock()
		movieGenreUpdateCache[key] = cache
		movieGenreUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q movieGenreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for movie_genre")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for movie_genre")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MovieGenreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), movieGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"movie_genre\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, movieGenrePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in movieGenre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all movieGenre")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MovieGenre) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no movie_genre provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(movieGenreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	movieGenreUpsertCacheMut.RLock()
	cache, cached := movieGenreUpsertCache[key]
	movieGenreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			movieGenreAllColumns,
			movieGenreColumnsWithDefault,
			movieGenreColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			movieGenreAllColumns,
			movieGenrePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert movie_genre, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(movieGenrePrimaryKeyColumns))
			copy(conflict, movieGenrePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"movie_genre\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(movieGenreType, movieGenreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(movieGenreType, movieGenreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert movie_genre")
	}

	if !cached {
		movieGenreUpsertCacheMut.Lock()
		movieGenreUpsertCache[key] = cache
		movieGenreUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MovieGenre record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MovieGenre) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MovieGenre provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), movieGenrePrimaryKeyMapping)
	sql := "DELETE FROM \"movie_genre\" WHERE \"uuid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from movie_genre")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for movie_genre")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q movieGenreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no movieGenreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from movie_genre")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for movie_genre")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MovieGenreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), movieGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"movie_genre\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, movieGenrePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from movieGenre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for movie_genre")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MovieGenre) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMovieGenre(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MovieGenreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MovieGenreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), movieGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"movie_genre\".* FROM \"movie_genre\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, movieGenrePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MovieGenreSlice")
	}

	*o = slice

	return nil
}

// MovieGenreExists checks if the MovieGenre row exists.
func MovieGenreExists(ctx context.Context, exec boil.ContextExecutor, uUID null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"movie_genre\" where \"uuid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if movie_genre exists")
	}

	return exists, nil
}
