// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMovies(t *testing.T) {
	t.Parallel()

	query := Movies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMoviesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMoviesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Movies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMoviesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MovieSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMoviesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MovieExists(ctx, tx, o.UUID)
	if err != nil {
		t.Errorf("Unable to check if Movie exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MovieExists to return true, but got false.")
	}
}

func testMoviesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	movieFound, err := FindMovie(ctx, tx, o.UUID)
	if err != nil {
		t.Error(err)
	}

	if movieFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMoviesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Movies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMoviesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Movies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMoviesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	movieOne := &Movie{}
	movieTwo := &Movie{}
	if err = randomize.Struct(seed, movieOne, movieDBTypes, false, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}
	if err = randomize.Struct(seed, movieTwo, movieDBTypes, false, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = movieOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = movieTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Movies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMoviesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	movieOne := &Movie{}
	movieTwo := &Movie{}
	if err = randomize.Struct(seed, movieOne, movieDBTypes, false, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}
	if err = randomize.Struct(seed, movieTwo, movieDBTypes, false, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = movieOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = movieTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMoviesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMoviesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(movieColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMovieToManyMovieActors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c MovieActor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, movieActorDBTypes, false, movieActorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieActorDBTypes, false, movieActorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MovieUUID, a.UUID)
	queries.Assign(&c.MovieUUID, a.UUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MovieActors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MovieUUID, b.MovieUUID) {
			bFound = true
		}
		if queries.Equal(v.MovieUUID, c.MovieUUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MovieSlice{&a}
	if err = a.L.LoadMovieActors(ctx, tx, false, (*[]*Movie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieActors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MovieActors = nil
	if err = a.L.LoadMovieActors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieActors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMovieToManyMovieDirectors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c MovieDirector

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, movieDirectorDBTypes, false, movieDirectorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieDirectorDBTypes, false, movieDirectorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MovieUUID, a.UUID)
	queries.Assign(&c.MovieUUID, a.UUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MovieDirectors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MovieUUID, b.MovieUUID) {
			bFound = true
		}
		if queries.Equal(v.MovieUUID, c.MovieUUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MovieSlice{&a}
	if err = a.L.LoadMovieDirectors(ctx, tx, false, (*[]*Movie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieDirectors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MovieDirectors = nil
	if err = a.L.LoadMovieDirectors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieDirectors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMovieToManyMovieGenres(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c MovieGenre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, movieGenreDBTypes, false, movieGenreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieGenreDBTypes, false, movieGenreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MovieUUID, a.UUID)
	queries.Assign(&c.MovieUUID, a.UUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MovieGenres().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MovieUUID, b.MovieUUID) {
			bFound = true
		}
		if queries.Equal(v.MovieUUID, c.MovieUUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MovieSlice{&a}
	if err = a.L.LoadMovieGenres(ctx, tx, false, (*[]*Movie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieGenres); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MovieGenres = nil
	if err = a.L.LoadMovieGenres(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieGenres); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMovieToManyMovieRatings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c MovieRating

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, movieRatingDBTypes, false, movieRatingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieRatingDBTypes, false, movieRatingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MovieUUID, a.UUID)
	queries.Assign(&c.MovieUUID, a.UUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MovieRatings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MovieUUID, b.MovieUUID) {
			bFound = true
		}
		if queries.Equal(v.MovieUUID, c.MovieUUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MovieSlice{&a}
	if err = a.L.LoadMovieRatings(ctx, tx, false, (*[]*Movie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieRatings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MovieRatings = nil
	if err = a.L.LoadMovieRatings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieRatings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMovieToManyMovieWatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c MovieWatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, movieWatchDBTypes, false, movieWatchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieWatchDBTypes, false, movieWatchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MovieUUID, a.UUID)
	queries.Assign(&c.MovieUUID, a.UUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MovieWatches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MovieUUID, b.MovieUUID) {
			bFound = true
		}
		if queries.Equal(v.MovieUUID, c.MovieUUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MovieSlice{&a}
	if err = a.L.LoadMovieWatches(ctx, tx, false, (*[]*Movie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieWatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MovieWatches = nil
	if err = a.L.LoadMovieWatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieWatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMovieToManyMovieWriters(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c MovieWriter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, movieWriterDBTypes, false, movieWriterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieWriterDBTypes, false, movieWriterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MovieUUID, a.UUID)
	queries.Assign(&c.MovieUUID, a.UUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MovieWriters().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MovieUUID, b.MovieUUID) {
			bFound = true
		}
		if queries.Equal(v.MovieUUID, c.MovieUUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MovieSlice{&a}
	if err = a.L.LoadMovieWriters(ctx, tx, false, (*[]*Movie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieWriters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MovieWriters = nil
	if err = a.L.LoadMovieWriters(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MovieWriters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMovieToManyAddOpMovieActors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieActor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieActor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieActorDBTypes, false, strmangle.SetComplement(movieActorPrimaryKeyColumns, movieActorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MovieActor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMovieActors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UUID, first.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, first.MovieUUID)
		}
		if !queries.Equal(a.UUID, second.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, second.MovieUUID)
		}

		if first.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MovieActors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MovieActors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MovieActors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMovieToManySetOpMovieActors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieActor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieActor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieActorDBTypes, false, strmangle.SetComplement(movieActorPrimaryKeyColumns, movieActorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMovieActors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieActors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMovieActors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieActors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UUID, d.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, d.MovieUUID)
	}
	if !queries.Equal(a.UUID, e.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, e.MovieUUID)
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MovieActors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MovieActors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMovieToManyRemoveOpMovieActors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieActor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieActor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieActorDBTypes, false, strmangle.SetComplement(movieActorPrimaryKeyColumns, movieActorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMovieActors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieActors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMovieActors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieActors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MovieActors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MovieActors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MovieActors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMovieToManyAddOpMovieDirectors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieDirector

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieDirector{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieDirectorDBTypes, false, strmangle.SetComplement(movieDirectorPrimaryKeyColumns, movieDirectorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MovieDirector{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMovieDirectors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UUID, first.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, first.MovieUUID)
		}
		if !queries.Equal(a.UUID, second.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, second.MovieUUID)
		}

		if first.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MovieDirectors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MovieDirectors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MovieDirectors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMovieToManySetOpMovieDirectors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieDirector

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieDirector{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieDirectorDBTypes, false, strmangle.SetComplement(movieDirectorPrimaryKeyColumns, movieDirectorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMovieDirectors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieDirectors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMovieDirectors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieDirectors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UUID, d.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, d.MovieUUID)
	}
	if !queries.Equal(a.UUID, e.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, e.MovieUUID)
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MovieDirectors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MovieDirectors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMovieToManyRemoveOpMovieDirectors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieDirector

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieDirector{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieDirectorDBTypes, false, strmangle.SetComplement(movieDirectorPrimaryKeyColumns, movieDirectorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMovieDirectors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieDirectors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMovieDirectors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieDirectors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MovieDirectors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MovieDirectors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MovieDirectors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMovieToManyAddOpMovieGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieGenre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieGenre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieGenreDBTypes, false, strmangle.SetComplement(movieGenrePrimaryKeyColumns, movieGenreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MovieGenre{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMovieGenres(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UUID, first.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, first.MovieUUID)
		}
		if !queries.Equal(a.UUID, second.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, second.MovieUUID)
		}

		if first.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MovieGenres[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MovieGenres[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MovieGenres().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMovieToManySetOpMovieGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieGenre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieGenre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieGenreDBTypes, false, strmangle.SetComplement(movieGenrePrimaryKeyColumns, movieGenreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMovieGenres(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieGenres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMovieGenres(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieGenres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UUID, d.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, d.MovieUUID)
	}
	if !queries.Equal(a.UUID, e.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, e.MovieUUID)
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MovieGenres[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MovieGenres[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMovieToManyRemoveOpMovieGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieGenre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieGenre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieGenreDBTypes, false, strmangle.SetComplement(movieGenrePrimaryKeyColumns, movieGenreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMovieGenres(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieGenres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMovieGenres(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieGenres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MovieGenres) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MovieGenres[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MovieGenres[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMovieToManyAddOpMovieRatings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieRating

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieRating{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieRatingDBTypes, false, strmangle.SetComplement(movieRatingPrimaryKeyColumns, movieRatingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MovieRating{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMovieRatings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UUID, first.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, first.MovieUUID)
		}
		if !queries.Equal(a.UUID, second.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, second.MovieUUID)
		}

		if first.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MovieRatings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MovieRatings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MovieRatings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMovieToManySetOpMovieRatings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieRating

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieRating{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieRatingDBTypes, false, strmangle.SetComplement(movieRatingPrimaryKeyColumns, movieRatingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMovieRatings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieRatings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMovieRatings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieRatings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UUID, d.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, d.MovieUUID)
	}
	if !queries.Equal(a.UUID, e.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, e.MovieUUID)
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MovieRatings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MovieRatings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMovieToManyRemoveOpMovieRatings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieRating

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieRating{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieRatingDBTypes, false, strmangle.SetComplement(movieRatingPrimaryKeyColumns, movieRatingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMovieRatings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieRatings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMovieRatings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieRatings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MovieRatings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MovieRatings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MovieRatings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMovieToManyAddOpMovieWatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieWatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieWatch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieWatchDBTypes, false, strmangle.SetComplement(movieWatchPrimaryKeyColumns, movieWatchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MovieWatch{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMovieWatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UUID, first.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, first.MovieUUID)
		}
		if !queries.Equal(a.UUID, second.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, second.MovieUUID)
		}

		if first.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MovieWatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MovieWatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MovieWatches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMovieToManySetOpMovieWatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieWatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieWatch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieWatchDBTypes, false, strmangle.SetComplement(movieWatchPrimaryKeyColumns, movieWatchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMovieWatches(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieWatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMovieWatches(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieWatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UUID, d.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, d.MovieUUID)
	}
	if !queries.Equal(a.UUID, e.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, e.MovieUUID)
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MovieWatches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MovieWatches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMovieToManyRemoveOpMovieWatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieWatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieWatch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieWatchDBTypes, false, strmangle.SetComplement(movieWatchPrimaryKeyColumns, movieWatchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMovieWatches(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieWatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMovieWatches(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieWatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MovieWatches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MovieWatches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MovieWatches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMovieToManyAddOpMovieWriters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieWriter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieWriter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieWriterDBTypes, false, strmangle.SetComplement(movieWriterPrimaryKeyColumns, movieWriterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MovieWriter{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMovieWriters(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.UUID, first.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, first.MovieUUID)
		}
		if !queries.Equal(a.UUID, second.MovieUUID) {
			t.Error("foreign key was wrong value", a.UUID, second.MovieUUID)
		}

		if first.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Movie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MovieWriters[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MovieWriters[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MovieWriters().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMovieToManySetOpMovieWriters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieWriter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieWriter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieWriterDBTypes, false, strmangle.SetComplement(movieWriterPrimaryKeyColumns, movieWriterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMovieWriters(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieWriters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMovieWriters(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieWriters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.UUID, d.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, d.MovieUUID)
	}
	if !queries.Equal(a.UUID, e.MovieUUID) {
		t.Error("foreign key was wrong value", a.UUID, e.MovieUUID)
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Movie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MovieWriters[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MovieWriters[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMovieToManyRemoveOpMovieWriters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Movie
	var b, c, d, e MovieWriter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MovieWriter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, movieWriterDBTypes, false, strmangle.SetComplement(movieWriterPrimaryKeyColumns, movieWriterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMovieWriters(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MovieWriters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMovieWriters(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MovieWriters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MovieUUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MovieUUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Movie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Movie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MovieWriters) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MovieWriters[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MovieWriters[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMoviesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMoviesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MovieSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMoviesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Movies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	movieDBTypes = map[string]string{`UUID`: `TEXT`, `Title`: `TEXT`, `ImdbLink`: `TEXT`, `Year`: `INTEGER`, `Rated`: `TEXT`, `Released`: `TEXT`, `Plot`: `TEXT`, `Country`: `TEXT`, `Language`: `TEXT`, `BoxOffice`: `TEXT`, `Production`: `TEXT`, `CallFelissa`: `INTEGER`, `Slasher`: `INTEGER`, `Zombies`: `INTEGER`, `Beast`: `INTEGER`, `Godzilla`: `INTEGER`, `CreatedDatetime`: `INTEGER`, `ImdbID`: `TEXT`, `WallpaperFu`: `BOOLEAN`, `RuntimeMinutes`: `INTEGER`}
	_            = bytes.MinRead
)

func testMoviesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(moviePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(movieAllColumns) == len(moviePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, movieDBTypes, true, moviePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMoviesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(movieAllColumns) == len(moviePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Movie{}
	if err = randomize.Struct(seed, o, movieDBTypes, true, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, movieDBTypes, true, moviePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(movieAllColumns, moviePrimaryKeyColumns) {
		fields = movieAllColumns
	} else {
		fields = strmangle.SetComplement(
			movieAllColumns,
			moviePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MovieSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMoviesUpsert(t *testing.T) {
	t.Parallel()
	if len(movieAllColumns) == len(moviePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Movie{}
	if err = randomize.Struct(seed, &o, movieDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Movie: %s", err)
	}

	count, err := Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, movieDBTypes, false, moviePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Movie: %s", err)
	}

	count, err = Movies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
