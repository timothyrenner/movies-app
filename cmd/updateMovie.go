/*
Copyright Â© 2022 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"context"
	"database/sql"
	"log"

	"github.com/spf13/cobra"
	"github.com/timothyrenner/movies-app/database"
)

// updateMovieCmd represents the updateMovie command
var updateMovieCmd = &cobra.Command{
	Use:   "update-movie",
	Short: "Updates a movie from a movie page.",
	Run:   updateMovie,
	Args:  cobra.RangeArgs(1, 1),
}

func init() {
	rootCmd.AddCommand(updateMovieCmd)
}

func updateMovie(cmd *cobra.Command, args []string) {
	moviePageFile := args[0]

	ctx := context.Background()
	log.Println("Opening database.")
	db, err := sql.Open("sqlite3", DB)
	if err != nil {
		log.Panicf("Error opening database %v:, %v", DB, err)
	}
	defer db.Close()

	queries := database.New(db)

	// Parse the page.
	log.Println("Parsing the movie page.")
	parser, err := CreateMovieParser()
	if err != nil {
		log.Panicf("Error creating parser: %v", err)
	}
	page, err := parser.ParsePage(moviePageFile)
	if err != nil {
		log.Panicf("Error parsing %v: %v", moviePageFile, err)
	}

	// Make a transaction here for the inserts.
	log.Println("Preparing update transaction.")
	insertMovieParams, err := CreateInsertMovieParams(page)
	if err != nil {
		log.Panicf("Error creating movie insert params: %v", err)
	}

	// Get the UUID from the database.
	movieUuid, err := queries.FindMovie(ctx, insertMovieParams.ImdbID)
	if err != nil {
		log.Panicf("Error finding movie %v: %v", insertMovieParams.ImdbID, err)
	}
	// If there's no movie uuid use the one that was generated by
	// CreateInsertMovieParams, if there is a movie uuid replace it so we
	// upsert.
	if movieUuid != "" {
		insertMovieParams.Uuid = movieUuid
	}

	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		log.Panicf("Error creating transaction: %v", err)
	}
	defer tx.Rollback()
	qtx := queries.WithTx(tx)
	if err := qtx.InsertMovie(ctx, *insertMovieParams); err != nil {
		log.Panicf("Error inserting movie: %v", err)
	}

	// Delete and reinsert the associated auxiliary tables we have data in the
	// page for.
	// Delete and repopulate actors.
	if err := qtx.DeleteActorsForMovie(
		ctx, sql.NullString{String: movieUuid, Valid: true},
	); err != nil {
		log.Panicf("Error deleting actors for movie %v: %v", movieUuid, err)
	}
	insertActorsParams := CreateInsertMovieActorParams(page, movieUuid)
	for ii := range insertActorsParams {
		if err := qtx.InsertMovieActor(ctx, insertActorsParams[ii]); err != nil {
			log.Panicf(
				"Error inserting actor %v for movie: %v",
				insertActorsParams[ii].Name, err,
			)
		}
	}
	// Delete and repopulate directors.
	if err := qtx.DeleteDirectorsForMovie(
		ctx, sql.NullString{String: movieUuid, Valid: true},
	); err != nil {
		log.Panicf("Error deleting directors for movie %v: %v", movieUuid, err)
	}
	insertDirectorsParams := CreateInsertMovieDirectorParams(page, movieUuid)
	for ii := range insertDirectorsParams {
		if err := qtx.InsertMovieDirector(ctx, insertDirectorsParams[ii]); err != nil {
			log.Panicf(
				"Error inserting director %v for movie: %v",
				insertDirectorsParams[ii].Name, err,
			)
		}
	}
	// Delete and repopulate writers.
	if err := qtx.DeleteWritersForMovie(
		ctx, sql.NullString{String: movieUuid, Valid: true},
	); err != nil {
		log.Panicf("Error deleting writers for movie %v: %v", movieUuid, err)
	}
	insertWritersParams := CreateInsertMovieWriterParams(page, movieUuid)
	for ii := range insertWritersParams {
		if err := qtx.InsertMovieWriter(ctx, insertWritersParams[ii]); err != nil {
			log.Panicf(
				"Error inserting writer %v for movie: %v",
				insertWritersParams[ii].Name, err,
			)
		}
	}
	// Delete and repopulate genres.
	if err := qtx.DeleteGenresForMovie(
		ctx, sql.NullString{String: movieUuid, Valid: true},
	); err != nil {
		log.Panicf("Error deleting genres for movie %v: %v", movieUuid, err)
	}
	insertGenresParams := CreateInsertMovieGenreParams(page, movieUuid)
	for ii := range insertGenresParams {
		if err := qtx.InsertMovieGenre(ctx, insertGenresParams[ii]); err != nil {
			log.Panicf(
				"Error inserting genre %v for movie: %v",
				insertGenresParams[ii].Name, err,
			)
		}
	}

	log.Println("Committing updates to database.")
	if err := tx.Commit(); err != nil {
		log.Panicf("Error committing transaction: %v", err)
	}
	log.Println("All done!")
}
